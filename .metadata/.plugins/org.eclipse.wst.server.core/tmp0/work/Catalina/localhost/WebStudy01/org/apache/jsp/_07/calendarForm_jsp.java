/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.90
 * Generated at: 2023-09-06 02:30:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._07;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.time.temporal.WeekFields;
import java.time.Month;
import java.util.stream.Collectors;
import java.text.MessageFormat;
import java.util.stream.Stream;
import java.time.Year;
import java.util.Optional;
import java.time.LocalDate;
import java.time.YearMonth;
import java.util.Locale;
import java.time.format.TextStyle;
import java.time.DayOfWeek;

public final class calendarForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


	final String OPTPTRN = "<option value='%s'>%s</option>";

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.time.temporal.WeekFields");
    _jspx_imports_classes.add("java.util.stream.Stream");
    _jspx_imports_classes.add("java.time.Month");
    _jspx_imports_classes.add("java.time.Year");
    _jspx_imports_classes.add("java.time.format.TextStyle");
    _jspx_imports_classes.add("java.util.Locale");
    _jspx_imports_classes.add("java.time.LocalDate");
    _jspx_imports_classes.add("java.time.DayOfWeek");
    _jspx_imports_classes.add("java.time.YearMonth");
    _jspx_imports_classes.add("java.util.Optional");
    _jspx_imports_classes.add("java.util.stream.Collectors");
    _jspx_imports_classes.add("java.text.MessageFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.1.min.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write("	.before,.after{\r\n");
      out.write("		color: silver;\r\n");
      out.write("	}\r\n");
      out.write("	table{\r\n");
      out.write("		border-collapse: collapse;\r\n");
      out.write("		width : 100%;\r\n");
      out.write("		min-height : 500px;\r\n");
      out.write("		text-align: center;\r\n");
      out.write("		font-size: large;\r\n");
      out.write("	}\r\n");
      out.write("	th,td{\r\n");
      out.write("		border : 1px solid black;\r\n");
      out.write("	}\r\n");
      out.write("	.SUNDAY{\r\n");
      out.write("		color: red;\r\n");
      out.write("	}\r\n");
      out.write("	.SATURDAY{\r\n");
      out.write("		color: blue;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');

	Locale locale = request.getLocale();

      out.write("\r\n");
      out.write("<form id=\"calForm\"  method=\"post\"\r\n");
      out.write("	action=\"");
      out.print(request.getContextPath() );
      out.write("/calendar\">\r\n");
      out.write("	<input type=\"number\" name=\"year\"/>\r\n");
      out.write("	<select name=\"month\">\r\n");
      out.write("	");
      out.print(
		Stream.of(Month.values())
			.map((m)->{
				String display = m.getDisplayName(TextStyle.FULL, locale);
				return String.format(OPTPTRN, m.getValue(), display);
				})
			.collect(Collectors.joining("\n"))
	);
      out.write("\r\n");
      out.write("	</select>\r\n");
      out.write("	<select name=\"locale\" >\r\n");
      out.write("		");
      out.print(
         //Locale -> Option Tah String : map
         //element collection : collect(Collectors)         
            Stream.of(Locale.getAvailableLocales())
            .filter((l)->!l.getDisplayName(locale).isEmpty())
                .map((l)->{
                   return String.format(OPTPTRN, l.toLanguageTag(), l.getDisplayName(l));
                }).collect(Collectors.joining("\n"))
         );
      out.write("\r\n");
      out.write("	</select>\r\n");
      out.write("</form>\r\n");
      out.write("<div id=\"resultArea\">\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("/* 	selector : ex) $('#calForm') - HtmlElement를 jQuery 객체로 wrapping 함.\r\n");
      out.write("				Integer : wrapper class, int  -> new Integer(3)\r\n");
      out.write("				원래 데이터를 감싸서 원래의 성질을 변경시킴 - adapter design pattern */\r\n");
      out.write("// 	console.log(calForm);\r\n");
      out.write("// 	console.log($(calForm));\r\n");
      out.write("\r\n");
      out.write("	$(\":input[name]\").on(\"change\", function(event){\r\n");
      out.write("		this.form.requestSubmit();\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	$(calForm).on(\"submit\", function(event){\r\n");
      out.write("		event.preventDefault();\r\n");
      out.write("		console.log(event.target);\r\n");
      out.write("		console.log(this);\r\n");
      out.write("		console.log($(this));\r\n");
      out.write("		\r\n");
      out.write("// 		동기 요청 -> 비동기 요청으로 전환\r\n");
      out.write("		let url = this.action;\r\n");
      out.write("		let method = this.method;\r\n");
      out.write("		let data = $(this).serialize();\r\n");
      out.write("// 		ex) year=2023&month=8&locale=ko-KR\r\n");
      out.write("		let settings = {\r\n");
      out.write("			url : url,\r\n");
      out.write("			method : method,\r\n");
      out.write("			data : data,\r\n");
      out.write("			dataType : \"html\",\r\n");
      out.write("			success : function(resp){\r\n");
      out.write("				$(resultArea).html(resp);\r\n");
      out.write("			}\r\n");
      out.write("		};\r\n");
      out.write("		$.ajax(settings);\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	$(\"#resultArea\").on(\"click\", \"a\", function(event){\r\n");
      out.write("		console.log(\" a tag click !!! \");\r\n");
      out.write("		let year = $(this).data(\"year\");\r\n");
      out.write("		let month = $(this).data(\"month\");\r\n");
      out.write("		\r\n");
      out.write("		calForm.year.value = year;\r\n");
      out.write("		calForm[\"month\"][\"value\"] = month;\r\n");
      out.write("		$(calForm).submit();\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
