/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.90
 * Generated at: 2023-09-08 03:45:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._09;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class formUI_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"");
      out.print(request.getContextPath() );
      out.write("/resources/js/jquery-3.7.1.min.js\"></script>\r\n");
      out.write("<script src=\"");
      out.print(request.getContextPath() );
      out.write("/resources/js/jquery.serializejson.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h4>클라이언트가 서버로 전송할 데이터를 입력받은 UI</h4>\r\n");
      out.write("<!-- method, enctype은 생략되면 기본값으로 적용 -->\r\n");
      out.write("<!-- enctype => get방식으로는 적용X 인코딩을 하려면 컨텐츠가 있어야함- 바디가 있어야함 - 바디가 있으려면 post여야함 -->\r\n");
      out.write("<form id=\"sampleForm\" action=\"");
      out.print(request.getContextPath() );
      out.write("/09/formDataProcess\" method=\"post\" enctype=\"application/x-www-form-urlencoded\">\r\n");
      out.write("<pre> \r\n");
      out.write("	<!-- 꼭 입력받아야할 때 -> required -->\r\n");
      out.write("	<input type=\"hidden\" name=\"hdnParam\" value=\"HIDDEN\">\r\n");
      out.write("	<input type=\"text\" name=\"txtParam\" required/>\r\n");
      out.write("	<input type=\"number\" name=\"numParam\" />\r\n");
      out.write("	<input type=\"date\" name=\"dateParam\" />\r\n");
      out.write("	<!-- radio버튼뿐만이 아니라 텍스트를 클릭해도 클릭이벤트가 전파되도록 하기 위해 label로 묶음 -->\r\n");
      out.write("	<label><input type=\"radio\" name=\"rdoParam\" value=\"RDO1\"/>RDO1</label>\r\n");
      out.write("	<input type=\"radio\" name=\"rdoParam\" id=\"raoParam2\" value=\"RDO2\"/>\r\n");
      out.write("	<label for=\"raoParam2\">RDO2</label>\r\n");
      out.write("	<label><input type=\"checkbox\" name=\"chkParam\" value=\"Chk1\"/></label>\r\n");
      out.write("	<label><input type=\"checkbox\" name=\"chkParam\" value=\"Chk2\"/></label>\r\n");
      out.write("	<label><input type=\"checkbox\" name=\"chkParam\" value=\"Chk3\"/></label>\r\n");
      out.write("	<select name=\"selParam1\" required>\r\n");
      out.write("	<!-- 	value값이 없다면 화이트스페이스 - 입력을 안받은 상태 -->\r\n");
      out.write("		<option value>선택</option>\r\n");
      out.write("		<option value=\"selValue1\">selText1</option>\r\n");
      out.write("		<option value=\"selValue2\">selText2</option>\r\n");
      out.write("	</select>\r\n");
      out.write("	<select name=\"selParam2\" multiple>\r\n");
      out.write("	<!-- attr - 무조건 문자열 / prop - 태그의 상태값을 가져옴 -->\r\n");
      out.write("		<option>mulText1</option> \r\n");
      out.write("		<option>mulText2</option> \r\n");
      out.write("		<option>mulText3</option>\r\n");
      out.write("	</select>\r\n");
      out.write("<!-- 	reset, submit - form태그 대상으로 실행 - 이벤트핸들러를 이용하고싶다면 form에다가 해아함 -->\r\n");
      out.write("	<input type=\"submit\" value=\"전송\" />\r\n");
      out.write("	<button type=\"reset\">취소</button>\r\n");
      out.write("	<button type=\"button\">그냥버튼</button>\r\n");
      out.write("</pre>	\r\n");
      out.write("</form> \r\n");
      out.write("<div id=\"resultArea\"></div>\r\n");
      out.write("<script>\r\n");
      out.write("// 	taget 결정 -> event 종류결정 -> event handler 구현 -> target에 handler를 bind\r\n");
      out.write("	let $resultArea = $(resultArea);\r\n");
      out.write("	let submitHandler = function(event){\r\n");
      out.write("		event.preventDefault();\r\n");
      out.write("		let $form = $(this);\r\n");
      out.write("		let settings = {\r\n");
      out.write("			url : $form.attr(\"action\"),\r\n");
      out.write("			method : $form.attr(\"method\"),\r\n");
      out.write("//  			data : $form.serialize(),	//application/x-www-form-urlencoded => parameter로 전송한다는 의미\r\n");
      out.write("											//application/json;charset=UTF-8 : 데이터가 json으로 들어간다\r\n");
      out.write(" 			data : JSON.stringify($form.serializeJSON()),\r\n");
      out.write("			contentType: \"application/json;charset=UTF-8\", \r\n");
      out.write("			dataType : \"json\", //Accept request header : Content-Type response header\r\n");
      out.write("			success : function(resp) {\r\n");
      out.write("				//response가 xml일 때 사용하는 코드\r\n");
      out.write("// 				let msg = $(resp).find(\"message\").text();\r\n");
      out.write("// 				$resultArea.html(msg);\r\n");
      out.write("				\r\n");
      out.write("				//response가 json일 때 사용하는 코드\r\n");
      out.write("// 				$resultArea.html(resp.message);\r\n");
      out.write("				$resultArea.html(JSON.stringify(resp)); //객체의 구조를 문자열로 직접 확인하고싶을 때 - 마셜링해서 확인\r\n");
      out.write("				\r\n");
      out.write("				//response가 html일 때 사용하는 코드\r\n");
      out.write("// 				$resultArea.html(resp);\r\n");
      out.write("			},\r\n");
      out.write("			error : function(jqXhr, status, error) {\r\n");
      out.write("				console.log(\"jqXhr : \", jqXhr);\r\n");
      out.write("				console.log(\"status : \", status);\r\n");
      out.write("				console.log(\"errer : \", error);\r\n");
      out.write("			}\r\n");
      out.write("		};\r\n");
      out.write("		$.ajax(settings);\r\n");
      out.write("	};\r\n");
      out.write("	$(sampleForm).on(\"submit\", submitHandler);\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
