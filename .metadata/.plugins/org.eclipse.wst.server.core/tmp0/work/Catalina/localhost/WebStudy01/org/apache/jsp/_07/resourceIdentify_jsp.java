/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.90
 * Generated at: 2023-09-04 02:11:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._07;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import kr.or.ddit.servlet01.DescriptionServlet;
import java.net.URL;
import java.io.File;

public final class resourceIdentify_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.net.URL");
    _jspx_imports_classes.add("kr.or.ddit.servlet01.DescriptionServlet");
    _jspx_imports_classes.add("java.io.File");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>07/resourceIdentify.jsp</title>\r\n");
      out.write("<style>\r\n");
      out.write("	img{\r\n");
      out.write("		width : 100px;\r\n");
      out.write("		height : 100px;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h4>자원의 종류와 식별 방법</h4>\r\n");
      out.write("<pre>\r\n");
      out.write("* 자원을 식별할 때는 변경되는 경로는 사용하지 않는다.\r\n");
      out.write("1. file system resource : 자원의 실제 파일 시스템상의 경로(물리 주소)를 그대로 사용해서 식별함.	- 클라이언트가 접근할 수 없음, 서버만 접근 가능 - 물리주소 사용\r\n");
      out.write("	ex) D:\\01.medias\\images\\cute1.png\r\n");
      out.write("	");

		File res1 = new File("D:\\01.medias\\images\\cute1.png");
	
      out.write("\r\n");
      out.write("	파일 크기 : ");
      out.print(res1.length() );
      out.write("\r\n");
      out.write("2. class path resource : classpath 이후의 논리 주소 형태로 자원을 식별함.\r\n");
      out.write("	ex) /kr/or/ddit/images/cat1.jpg\r\n");
      out.write("	");

		ClassLoader loader = DescriptionServlet.class.getClassLoader();
		URL url = loader.getResource("kr/or/ddit/images/cat1.jpg");
		if(url!=null){
			String realPath = url.getFile();
			File res2 = new File(realPath);
	
      out.write("\r\n");
      out.write("			파일 크기 : ");
      out.print(res2.length() );
      out.write("\r\n");
      out.write("			파일의 물리 주소 : ");
      out.print(realPath );
      out.write('\r');
      out.write('\n');
      out.write('	');

		}
	
      out.write("\r\n");
      out.write("3. web resource (context resource) : URL 형태의 식별자 체계로 네트워크 반대편의 클라이언트가 접근할 수 있는 자원.\r\n");
      out.write("	ex) http://localhost/WebStudy01/resources/images/cat4.png (URL)\r\n");
      out.write("	");

		String logical = "/resources/images/cat4.png";
		String physical = application.getRealPath(logical);
		File res3 = new File(physical);
	
      out.write("\r\n");
      out.write("	파일 크기 : ");
      out.print(res3.length() );
      out.write("\r\n");
      out.write("	파일의 물리 주소 : ");
      out.print(physical );
      out.write("\r\n");
      out.write("\r\n");
      out.write("* 웹 자원의 식별자\r\n");
      out.write(" URI(Uniform Resource Identifier, 통합 자원 식별자) : 네트워크 자원을 식별하는 체계\r\n");
      out.write(" - URN(Uniform Resource Naming)\r\n");
      out.write(" - URC(Uniform Resource Content)\r\n");
      out.write(" - URL(Uniform Resource Locator)\r\n");
      out.write("\r\n");
      out.write("case 1 - http://localhost/WebStudy01/resources/images/cat4.png (URL)\r\n");
      out.write("case 2 - http://localhost/WebStudy01/ver4/imageForm.do (URI)\r\n");
      out.write("\r\n");
      out.write("URL 표기 방식\r\n");
      out.write("protocol://IP[domain]:port/context/depth../resource_name\r\n");
      out.write("\r\n");
      out.write("절대경로\r\n");
      out.write("	1) http://localhost/WebStudy01/resources/images/cat4.png\r\n");
      out.write("	2) //localhost/WebStudy01/resources/images/cat4.png\r\n");
      out.write("	3) /WebStudy01/resources/images/cat4.png\r\n");
      out.write("	4) ");
      out.print(request.getContextPath() );
      out.write("/resources/images/cat4.png (**)\r\n");
      out.write("상대경로 : 현재 페이지의 출처를 기준으로 경로를 표기함.\r\n");
      out.write("	../resources/images/cat4.png\r\n");
      out.write("	\r\n");
      out.write("</pre>\r\n");
      out.write("<img src=\"http://localhost/WebStudy01/resources/images/cat4.png\"/>\r\n");
      out.write("<img src=\"//localhost/WebStudy01/resources/images/cat4.png\"/>\r\n");
      out.write("<img src=\"/WebStudy01/resources/images/cat4.png\"/>\r\n");
      out.write("<img src=\"");
      out.print(request.getContextPath() );
      out.write("/resources/images/cat4.png\"/>\r\n");
      out.write("<img src=\"../resources/images/cat4.png\"/>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
