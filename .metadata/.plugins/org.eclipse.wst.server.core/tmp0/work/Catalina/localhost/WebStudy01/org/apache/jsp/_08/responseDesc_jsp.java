/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.90
 * Generated at: 2023-09-07 01:01:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._08;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class responseDesc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
 
/* 	response.setContentType("text/plain; charset=utf-8");
	response.setContentLengthLong(100); */

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>08</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h4>HttpServletResponse</h4>\r\n");
      out.write("<pre>\r\n");
      out.write("	1. Response Line : Status Code(응답 상태 코드) - response.sendError(sc[, message]), setStatus(sc)\r\n");
      out.write("		Status Code : 서버에서 요청 처리 결과의 성공 여부를 표현하는 상태 코드\r\n");
      out.write("			Http : connectLess + stateLess\r\n");
      out.write("		 100~ : ING... webSocket(connectFull) - 한번 연결을 의도적으로 수립해놓으면 직접끊기 전까지 연결 유지\r\n");
      out.write("		 200~ : OK\r\n");
      out.write("		 300~ : 요청 처리가 최종적으로 완료되려면, 클라이언트로부터 추가 액션이 필요함. response body가 없음.\r\n");
      out.write("		 	302, 307(Moved) + Location(자원의 새로운 주소) 헤더 사용\r\n");
      out.write("		 	304(Not Modified) : 일반적으로 브라우저는 정적 자원에 대해 캐싱을 해서 사용함.\r\n");
      out.write("		 		  한번 캐싱된 자원이 변경된 적 없으므로, 캐시 자원을 그대로 사용하라는 표현.\r\n");
      out.write("		 400~ : 처리 실패의 원인이 클라이언트측에 있을 때.\r\n");
      out.write("		 	404 (Not Found) - URI가 잘못됨\r\n");
      out.write("		 	405 (Method Not Allowed) - method가 잘못됨\r\n");
      out.write("		 	400 (Bad Request, 요청 검증에 주로 활용됨.)\r\n");
      out.write("		 	\r\n");
      out.write("		 	--어플리케이션의 보호를 위한 접근 제어에서 활용됨.\r\n");
      out.write("		 	401 (UnAuthorized)\r\n");
      out.write("		 	403 (Forbidden)\r\n");
      out.write("		 	\r\n");
      out.write("		 	406 (Not Acceptable) : 클라이언트가 요청한 Mime content를 전송할 수 없음. - 응답데이터를 못만듦\r\n");
      out.write("		 			request header(Accept), response header(Content-Type)\r\n");
      out.write("		 	415 (UnSupported Media Type) : 클라이언트가 전송한 content를 판독할 수 없음\r\n");
      out.write("		 			request header(Content-Type)\r\n");
      out.write("		 500~ : 처리 실패의 원인이 서버측에 있을 때. 500(Internal Server Error)\r\n");
      out.write("		 \r\n");
      out.write("	2. Response Header : response.set[Int|Date]Header(name, value), addHeader...\r\n");
      out.write("		1) Content-* : Content-Type, Content-Length - response body 컨텐츠를 수식해줌.\r\n");
      out.write("		2) Cache 제어 : Cache-Control(Http ver 1.1에서 사용), Expires, Pragma(Heep ver 1.0에서 사용)\r\n");
      out.write("					어떤 헤더를 쓸건지 기준이 서버가 되면 안됨- 클라이언트가 기준이 되어야함 - 웹 표준화 - 둘다 사용\r\n");
      out.write("		");

			response.setHeader("Cache-Control", "no-cache");
			response.addHeader("Cache-Control", "no-store");
			response.setHeader("Pragma", "no-cache");
			response.addHeader("Pragma", "no-store");
			response.setDateHeader("Expires", 0);
		
      out.write("\r\n");
      out.write("		3) Auto Request : Refresh\r\n");
      out.write("		4) Redirection : Location\r\n");
      out.write("		\r\n");
      out.write("	3. Response Body(Content Body, Message Body)\r\n");
      out.write("		채널 : 양방향 / 스트림 : 단방향 => 입력,출력스트림 쪼개어져있음 - 단방향의 출력스트림 필요 - writer와 stream중 무엇 사용? - content가 결정\r\n");
      out.write("		response.getWriter() : char 기반의 문자 컨텐츠를 기록할 출력 스트림\r\n");
      out.write("		response.getOutputStream() : byte 기반의 스트림(binary) 컨텐츠를 기록할 출력 스트림\r\n");
      out.write("</pre>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
