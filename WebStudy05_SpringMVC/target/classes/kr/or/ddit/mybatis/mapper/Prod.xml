<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.prod.dao.ProdDAO">

	<resultMap type="ProdVO" id="prodMap" autoMapping="true">
		<id property="prodId" column="PROD_ID"/>
		<association property="buyer" autoMapping="true"/>
		<association property="lprod" autoMapping="true"/>
		<collection property="cartList" ofType="CartVO" autoMapping="true">
			<association property="member" autoMapping="true"/>
		</collection>
	</resultMap>
	<select id="selectProd" resultMap="prodMap" parameterType="String">
		WITH MEMBERVIEW AS(
		    SELECT MEMBER.*, CART.*
		    FROM CART LEFT OUTER JOIN MEMBER ON(CART_MEMBER=MEM_ID)
		)
		SELECT
	        PROD_ID,  PROD_NAME, PROD_LGU,
	        PROD_BUYER, PROD_COST, PROD_PRICE,
	        PROD_SALE, PROD_OUTLINE, PROD_DETAIL,
	        PROD_IMG, PROD_TOTALSTOCK, PROD_INSDATE,
	        PROD_PROPERSTOCK, PROD_SIZE,
	        PROD_COLOR, PROD_DELIVERY,
	        PROD_UNIT, PROD_QTYIN,
	        PROD_QTYSALE, PROD_MILEAGE,
	        LPROD_NM,
	        BUYER_ID, BUYER_NAME, BUYER_LGU, BUYER_BANK,
	        BUYER_ADD1, BUYER_CHARGER,
	        CART_NO, CART_QTY,
	        TO_DATE(SUBSTR(CART_NO, 1, 8), 'YYYYMMDD') CART_DATE,
	        MEM_ID, MEM_NAME, MEM_HP,
	        MEM_MAIL, MEM_ADD1,MEM_MILEAGE
	    FROM
	        PROD LEFT OUTER JOIN BUYER ON(PROD_BUYER=BUYER_ID)
	            LEFT OUTER JOIN LPROD ON(PROD_LGU=LPROD_GU)
	            LEFT OUTER JOIN MEMBERVIEW ON(PROD_ID=CART_PROD)
	    WHERE
	        PROD_ID=#{prodId}
	</select>
	
	<sql id="fromFrag">
		FROM PRODVIEW
	</sql>
	
	<sql id="searchFrag">
		<trim prefix="WHERE" prefixOverrides="AND">
			<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(detailCondition.prodLgu)">
				AND PROD_LGU = #{detailCondition.prodLgu}
			</if>
			<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(detailCondition.prodBuyer)">
			 	AND PROD_BUYER = #{detailCondition.prodBuyer}
			</if>
			<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(detailCondition.prodName)">
				AND INSTR(PROD_NAME, #{detailCondition.prodName}) > 0
			</if>
		</trim>
	</sql>
	<!-- 	분류와 이름 동시에 검색할 수 있음.. 두 개가 and연산으로 연결되어야함  -->
<!-- 	- 검색조건 3가지 경우를 커버하려면 and라는 키워드에 대한 처리가 필요 -->
<!-- 	 -> trim .. 검색하고있다라면 where절 붙여주고 잘못들어있는 and가 앞에 붙어있다면 oberride -->
	
	<select id="selectTotalRecord" resultType="int" parameterType="PaginationInfo">
		SELECT COUNT(*)
		<include refid="fromFrag"/>
		<include refid="searchFrag"/>
	</select>

	<select id="selectProdList" parameterType="PaginationInfo" resultType="ProdVO">
		SELECT B.*
		FROM (
		    SELECT ROWNUM RNUM, A.*
		        FROM (
		        SELECT 
		             PROD_ID, PROD_NAME, PROD_SALE, PROD_COST, PROD_MILEAGE
		            , LPROD_NM "lprod.lprodNm"
		            , BUYER_NAME "buyer.buyerName"
		            , (
		                SELECT COUNT(DISTINCT CART_MEMBER)
		                FROM CART 
		                WHERE CART_PROD = PROD_ID
		            ) MEM_COUNT
		        <include refid="fromFrag"/>
		        <include refid="searchFrag"/>
		        ORDER BY PROD_ID
		        
		    ) A
		) B
		 <![CDATA[
	    WHERE RNUM >= #{startRow} AND RNUM <= #{endRow}
	    ]]>
	</select>
	
	<insert id="insertProd" parameterType="ProdVO">
		<selectKey order="BEFORE" resultType="String" keyProperty="prodId">
		    SELECT #{prodLgu} ||
			    LPAD(
			    NVL(TO_NUMBER(SUBSTR(MAX(PROD_ID), LENGTH(#{prodLgu})+1)),0)+1
			    ,6,'0')
			FROM PROD
			WHERE PROD_LGU=#{prodLgu}
		</selectKey>
		INSERT INTO prod (
		    prod_id, prod_name, prod_lgu,prod_buyer,
		    prod_cost, prod_price,prod_sale,
		    prod_outline, prod_detail, prod_img,
		    prod_totalstock,prod_insdate,
		    prod_properstock,prod_size,
		    prod_color, prod_delivery, prod_unit,
		    prod_qtyin,  prod_qtysale, prod_mileage
		) VALUES (
		    #{prodId,jdbcType=VARCHAR}
		    , #{prodName,jdbcType=VARCHAR}
		    , #{prodLgu,jdbcType=CHAR}
		    , #{prodBuyer,jdbcType=CHAR}
		    , #{prodCost,jdbcType=NUMERIC}
		    , #{prodPrice,jdbcType=NUMERIC}
		    , #{prodSale,jdbcType=NUMERIC}
		    , #{prodOutline,jdbcType=VARCHAR}
		    , #{prodDetail,jdbcType=CLOB}
		    , #{prodImg,jdbcType=VARCHAR}
		    , #{prodTotalstock,jdbcType=NUMERIC}
		    , #{prodInsdate,jdbcType=DATE}
		    , #{prodProperstock,jdbcType=NUMERIC}
		    , #{prodSize,jdbcType=VARCHAR}
		    , #{prodColor,jdbcType=VARCHAR}
		    , #{prodDelivery,jdbcType=VARCHAR}
		    , #{prodUnit,jdbcType=VARCHAR}
		    , #{prodQtyin,jdbcType=NUMERIC}
		    , #{prodQtysale,jdbcType=NUMERIC}
		    , #{prodMileage,jdbcType=NUMERIC}
		)
	</insert>
	
	<update id="updateProd" parameterType="ProdVO">
		UPDATE PROD
		SET
		    PROD_NAME=#{prodName,jdbcType=VARCHAR}
		    , PROD_LGU=#{prodLgu,jdbcType=CHAR}
		    , PROD_BUYER=#{prodBuyer,jdbcType=CHAR}
		    , PROD_COST=#{prodCost,jdbcType=NUMERIC}
		    , PROD_PRICE=#{prodPrice,jdbcType=NUMERIC}
		    , PROD_SALE=#{prodSale,jdbcType=NUMERIC}
		    , PROD_OUTLINE=#{prodOutline,jdbcType=VARCHAR}
		    , PROD_DETAIL=#{prodDetail,jdbcType=CLOB}
		    , PROD_TOTALSTOCK=#{prodTotalstock,jdbcType=NUMERIC}
		    , PROD_INSDATE=#{prodInsdate,jdbcType=DATE}
		    , PROD_PROPERSTOCK=#{prodProperstock,jdbcType=NUMERIC}
		    , PROD_SIZE=#{prodSize,jdbcType=VARCHAR}
		    , PROD_COLOR=#{prodColor,jdbcType=VARCHAR}
		    , PROD_DELIVERY=#{prodDelivery,jdbcType=VARCHAR}
		    , PROD_UNIT=#{prodUnit,jdbcType=VARCHAR}
		    , PROD_QTYIN=#{prodQtyin,jdbcType=NUMERIC}
		    , PROD_QTYSALE=#{prodQtysale,jdbcType=NUMERIC}
		    , PROD_MILEAGE=#{prodMileage,jdbcType=NUMERIC}
		    <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(prodImg)">
		    	,PROD_IMG=#{prodImg,jdbcType=VARCHAR}
		    </if>
		WHERE
	        PROD_ID = #{prodId}
	</update>
</mapper>